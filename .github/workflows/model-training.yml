name: Diabetes MLflow CI/CD with Docker Hub

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'MLproject/**'
      - '.github/workflows/**'
      - '*.py'
      - '*.yaml'
      - '*.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      experiment_name:
        description: 'MLflow experiment name'
        required: false
        default: 'diabetes_classification_ci_[nama-siswa]'
      n_estimators:
        description: 'Number of estimators'
        required: false
        default: '100'
      max_depth:
        description: 'Maximum depth'
        required: false
        default: '10'
      build_docker:
        description: 'Build and push Docker image (true/false)'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  diabetes-model-training-and-docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Setup Docker Buildx
      if: github.event.inputs.build_docker != 'false'
      uses: docker/setup-buildx-action@v3

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy==1.24.4 pandas==2.1.4 scikit-learn==1.3.2 
        pip install matplotlib==3.8.2 seaborn==0.13.0
        pip install mlflow==2.8.1 dagshub python-dotenv joblib
        pip install requests urllib3
        
    - name: Setup environment variables
      run: |
        echo "PYTHONPATH=$GITHUB_WORKSPACE:$GITHUB_WORKSPACE/MLproject:$PYTHONPATH" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_INSECURE_TLS=true" >> $GITHUB_ENV
        echo "MLFLOW_HTTP_REQUEST_TIMEOUT=30" >> $GITHUB_ENV
        echo "MLFLOW_HTTP_REQUEST_MAX_RETRIES=3" >> $GITHUB_ENV
        
    - name: Prepare diabetes data and run training
      working-directory: ./MLproject
      run: |
        # Create sample diabetes data if needed
        python -c "
        import pandas as pd
        import numpy as np
        from sklearn.preprocessing import LabelEncoder
        import os
        
        if not os.path.exists('diabetes_preprocessed.csv'):
            # Create sample diabetes data
            np.random.seed(42)
            n_samples = 1000
            
            data = {
                'gender': np.random.choice(['Male', 'Female'], n_samples),
                'age': np.random.normal(50, 15, n_samples),
                'hypertension': np.random.choice([0, 1], n_samples, p=[0.8, 0.2]),
                'heart_disease': np.random.choice([0, 1], n_samples, p=[0.9, 0.1]),
                'smoking_history': np.random.choice(['never', 'former', 'current'], n_samples),
                'bmi': np.random.normal(25, 5, n_samples),
                'HbA1c_level': np.random.normal(5.5, 1, n_samples),
                'blood_glucose_level': np.random.normal(120, 30, n_samples),
                'diabetes': np.random.choice([0, 1], n_samples, p=[0.7, 0.3])
            }
            
            df = pd.DataFrame(data)
            
            # Basic preprocessing
            le_gender = LabelEncoder()
            le_smoking = LabelEncoder()
            df['gender'] = le_gender.fit_transform(df['gender'])
            df['smoking_history'] = le_smoking.fit_transform(df['smoking_history'])
            
            # Ensure positive values
            df['age'] = np.clip(df['age'], 18, 100)
            df['bmi'] = np.clip(df['bmi'], 15, 50)
            df['HbA1c_level'] = np.clip(df['HbA1c_level'], 3, 15)
            df['blood_glucose_level'] = np.clip(df['blood_glucose_level'], 50, 300)
            
            df.to_csv('diabetes_preprocessed.csv', index=False)
            print('Sample diabetes data created')
        "
        
        # Run training
        python modelling.py \
          --data_path "diabetes_preprocessed.csv" \
          --experiment_name "${{ github.event.inputs.experiment_name || 'diabetes_classification_ci_[nama-siswa]' }}" \
          --model_name "diabetes_classifier_ci" \
          --n_estimators ${{ github.event.inputs.n_estimators || 100 }} \
          --max_depth ${{ github.event.inputs.max_depth || 10 }} \
          --random_state 42
          
    - name: Verify training artifacts
      working-directory: ./MLproject
      run: |
        echo "Checking training artifacts..."
        ls -la *.pkl || echo "No .pkl files found"
        ls -la *.png || echo "No .png files found"
        
        if [ ! -f "diabetes_model_ci.pkl" ]; then
          echo "ERROR: Model file diabetes_model_ci.pkl not found!"
          echo "Available files:"
          ls -la
          exit 1
        else
          echo "‚úÖ Model file found: diabetes_model_ci.pkl"
        fi
        
    - name: Login to Docker Hub
      if: github.event.inputs.build_docker != 'false'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build Docker Image for Diabetes
      if: github.event.inputs.build_docker != 'false'
      working-directory: ./MLproject
      run: |
        echo "üê≥ Building Docker image for diabetes classification..."
        
        # Verify model exists
        if [ ! -f "diabetes_model_ci.pkl" ]; then
          echo "‚ùå Model file not found, cannot build Docker image"
          exit 1
        fi
        
        echo "‚úÖ Model file found, proceeding with Docker build"
        
        # Create requirements.txt
        cat > requirements.txt << 'EOF'
        mlflow==2.8.1
        scikit-learn==1.3.2
        pandas==2.1.4
        numpy==1.24.4
        flask==2.3.3
        joblib==1.3.2
        gunicorn==21.2.0
        EOF
        
        # Create a simple Flask app for serving
        cat > app.py << 'EOF'
        from flask import Flask, request, jsonify
        import joblib
        import numpy as np
        import pandas as pd
        import os
        
        app = Flask(__name__)
        
        # Load model at startup
        model = None
        try:
            model = joblib.load('diabetes_model_ci.pkl')
            print("‚úÖ Model loaded successfully")
        except Exception as e:
            print(f"‚ùå Error loading model: {e}")
        
        @app.route('/health', methods=['GET'])
        def health():
            if model is not None:
                return jsonify({"status": "healthy", "model": "diabetes_classifier"})
            else:
                return jsonify({"status": "unhealthy", "error": "model not loaded"}), 500
        
        @app.route('/predict', methods=['POST'])
        def predict():
            try:
                if model is None:
                    return jsonify({"error": "Model not loaded"}), 500
                
                data = request.get_json()
                
                # Convert to DataFrame if needed
                if isinstance(data, dict):
                    df = pd.DataFrame([data])
                else:
                    df = pd.DataFrame(data)
                
                # Make prediction
                prediction = model.predict(df)
                probability = model.predict_proba(df)
                
                return jsonify({
                    "prediction": prediction.tolist(),
                    "probability": probability.tolist(),
                    "model": "diabetes_classifier"
                })
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        @app.route('/', methods=['GET'])
        def root():
            return jsonify({
                "message": "Diabetes Classification API",
                "endpoints": {
                    "health": "/health",
                    "predict": "/predict (POST)"
                }
            })
        
        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=8080, debug=False)
        EOF
        
        # Create Dockerfile
        cat > Dockerfile << 'EOF'
        FROM python:3.9-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application files
        COPY app.py .
        COPY diabetes_model_ci.pkl .
        COPY modelling.py .
        
        # Copy data file if it exists
        COPY diabetes_preprocessed.csv . 2>/dev/null || true
        
        # Expose port
        EXPOSE 8080
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8080/health || exit 1
        
        # Start the application
        CMD ["gunicorn", "--bind", "0.0.0.0:8080", "--workers", "1", "--timeout", "60", "app:app"]
        EOF
        
        # Build Docker image
        DOCKER_IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:latest"
        echo "Building Docker image: $DOCKER_IMAGE_NAME"
        
        docker build -t "$DOCKER_IMAGE_NAME" . --no-cache
        
        # Verify image was built
        if docker images | grep -q "${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow"; then
          echo "‚úÖ Docker image built successfully"
          docker images | grep diabetes-classification-mlflow
        else
          echo "‚ùå Docker image build failed"
          exit 1
        fi
        
    - name: Push Docker Image to Docker Hub
      if: github.event.inputs.build_docker != 'false'
      working-directory: ./MLproject
      run: |
        DOCKER_IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:latest"
        echo "üöÄ Pushing Docker image to Docker Hub..."
        
        # Verify image exists locally before pushing
        if docker images | grep -q "${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow"; then
          echo "‚úÖ Image found locally, proceeding with push"
          docker push "$DOCKER_IMAGE_NAME"
          
          # Tag with build number
          BUILD_TAG="${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:build-${{ github.run_number }}"
          docker tag "$DOCKER_IMAGE_NAME" "$BUILD_TAG"
          docker push "$BUILD_TAG"
          
          echo "‚úÖ Docker image pushed successfully!"
          echo "üê≥ Docker Hub URL: https://hub.docker.com/r/${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow"
          echo "‚úÖ Also tagged as: $BUILD_TAG"
        else
          echo "‚ùå Docker image not found locally, cannot push"
          docker images
          exit 1
        fi
    
    - name: Test Docker Image Locally
      if: github.event.inputs.build_docker != 'false'
      run: |
        DOCKER_IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:latest"
        echo "üß™ Testing Docker image locally..."
        
        # Run container in background
        docker run -d -p 8080:8080 --name test-diabetes-model "$DOCKER_IMAGE_NAME"
        
        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 15
        
        # Check if container is running
        if docker ps | grep test-diabetes-model; then
          echo "‚úÖ Container is running successfully"
          docker logs test-diabetes-model
          
          # Test health endpoint
          for i in {1..5}; do
            if curl -f http://localhost:8080/health; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "Health check attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
          # Test root endpoint
          curl -f http://localhost:8080/ || echo "Root endpoint test failed"
          
        else
          echo "‚ùå Container failed to start"
          docker logs test-diabetes-model || true
        fi
        
        # Cleanup
        docker stop test-diabetes-model || true
        docker rm test-diabetes-model || true
        
    - name: Upload training artifacts
      uses: actions/upload-artifact@v4
      with:
        name: diabetes-model-artifacts-${{ github.run_number }}
        path: |
          MLproject/*.pkl
          MLproject/*.png
          MLproject/*.txt
          MLproject/*.md
          MLproject/*.csv
          MLproject/model_artifacts/
          MLproject/mlruns/
        retention-days: 30
        if-no-files-found: warn
        
    - name: Create comprehensive summary
      working-directory: ./MLproject
      run: |
        echo "# üéØ Diabetes MLflow CI/CD Training & Docker Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow Run**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Dataset**: Diabetes Classification" >> $GITHUB_STEP_SUMMARY
        echo "- **Parameters**: n_estimators=${{ github.event.inputs.n_estimators || 100 }}, max_depth=${{ github.event.inputs.max_depth || 10 }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Experiment**: ${{ github.event.inputs.experiment_name || 'diabetes_classification_ci_[nama-siswa]' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build**: ${{ github.event.inputs.build_docker != 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Author**: [nama-siswa]" >> $GITHUB_STEP_SUMMARY
        
        echo "## üê≥ Docker Information" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.build_docker }}" != "false" ]; then
          echo "- **Docker Hub Repository**: https://hub.docker.com/r/${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Tag**: \`${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Tag**: \`${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:build-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Pull Command**: \`docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Command**: \`docker run -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: \`curl http://localhost:8080/health\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Docker build was skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "## üìÅ Generated Files" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        ls -la *.pkl *.png *.txt *.md *.csv 2>/dev/null || echo "No artifacts found"
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        echo "## üìä Training Results" >> $GITHUB_STEP_SUMMARY
        if [ -f "diabetes_training_summary.md" ]; then
          cat diabetes_training_summary.md >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Notify completion
      run: |
        echo "üéâ Diabetes MLflow CI/CD with Docker workflow completed successfully!"
        echo "üìä Check the 'Actions' tab for detailed results and artifacts"
        echo "üìÅ Artifacts will be available for download for 30 days"
        if [ "${{ github.event.inputs.build_docker }}" != "false" ]; then
          echo "üê≥ Docker image pushed to: https://hub.docker.com/r/${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow"
          echo "üöÄ Pull with: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:latest"
          echo "‚ñ∂Ô∏è  Run with: docker run -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-classification-mlflow:latest"
          echo "üè• Health check: curl http://localhost:8080/health"
        fi
        echo "üíª Local tracking: MLflow results stored in artifacts"
        echo "üè• Model: Diabetes Classification with Random Forest"